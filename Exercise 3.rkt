;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |Exercise 3|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)

; not needed to implement your functions
; but very helpful for testing
(require "./iterated_images.rkt")

; Part 1: Ordinary Recursion

; FILL IN FUNCTIONS HERE
; function names are given but you
; MUST add signatures and purpose statements

; multiply-list
; (listof number) -> number
; compute the product of a list of numbers

(define (multiply-list list)
  (if (empty? list)
      1
      (* (first list)
         (multiply-list (rest list)))
      )
  )

(check-expect (multiply-list '()) 1)
(check-expect (multiply-list '(1 2 3 4)) 24)
(check-expect (multiply-list '(-1 2 909124 2 0)) 0)


; my-iterated-overlay
; (number -> image) number -> image
; overlays a given image number of times

(define (my-iterated-overlay proc n)
  (if (= n 0)
      empty-image
      (overlay (my-iterated-overlay proc (- n 1))
               (proc (- n 1))
               )
      )
  )

(check-expect (my-iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  0)
              empty-image)


(check-expect (my-iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (my-iterated-overlay(lambda (n)
                                    (square 50
                                            "solid"
                                            "red")
                                    )
                                  5)
              (iterated-overlay(lambda (n)
                                 (square 50
                                         "solid"
                                         "red")
                                 )5)
              )

; iterated-any
; (image image -> image) (number -> image) number -> image
; iterates a image generated by a proc in the style of an arbitrary combiner a number of times

(define (iterated-any combine proc n)
  (if (= n 0)
      empty-image
      (combine (iterated-any combine proc (- n 1))
               (proc (- n 1))
               )
      )
  )

(check-expect (iterated-any beside (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  0)
              empty-image)


(check-expect (iterated-any overlay (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (iterated-any overlay (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (my-iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (iterated-any above (lambda (n)
                                    (square 50
                                            "outline"
                                            "red")
                                    )
                                  1)
              (iterated-above (lambda (n)
                                 (square 50
                                         "outline"
                                         "red")
                                 )1)
              )

; Part 2: Iterative Recursion

; FILL IN FUNCTIONS HERE

; multiply-list/iter
; (listof number) -> number
; same as multiply-list but uses a helper function and is a iterated-recursion
; compute the product of a list of numbers

(define (multiply-list/iter list)
  (local[(define (multiply-list-helper list partial-product)
           (if (empty? list)
               partial-product
               (multiply-list-helper (rest list) (* (first list) partial-product))
               )
           )]
    (multiply-list-helper list 1)
    )
  )

(check-expect (multiply-list/iter '()) 1)
(check-expect (multiply-list/iter '(1 2 3 4)) 24)
(check-expect (multiply-list/iter '(-1 2 909124 2 0)) 0)


; iterated-overlay/iter
; (number -> image) number -> image
; same as my-iterated-overlay but uses a helper function and is a iterated-recursion
; overlays a given image number of times

(define (iterated-overlay/iter proc n)
  (local [(define (iterated-overlay-helper proc n partial-image)
            (if (= n 0)
                partial-image
                (iterated-overlay-helper proc (- n 1) (overlay (proc (- n 1))
                                                               partial-image))
                )
            )]
    (iterated-overlay-helper proc n empty-image)
    )
  )


(check-expect (iterated-overlay/iter(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  0)
              empty-image)


(check-expect (iterated-overlay/iter(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (iterated-overlay/iter(lambda (n)
                                    (square 50
                                            "solid"
                                            "red")
                                    )
                                  5)
              (iterated-overlay(lambda (n)
                                 (square 50
                                         "solid"
                                         "red")
                                 )5)
              )


; iterated-any/iter
; (image image -> image) (number -> image) number -> image
; same as iterated-any but uses a helper function and is a iterated-recursion
; iterates a image generated by a proc in the style of an arbitrary combiner a number of times

(define (iterated-any/iter combine proc n)
  (local [(define (iterated-any-helper combine proc n partial-image)
            (if (= n 0)
                partial-image
                (iterated-any-helper combine proc (- n 1) (combine (proc (- n 1))
                                                               partial-image))
                )
            )]
    (iterated-any-helper combine proc n empty-image)
    )
  )

(check-expect (iterated-any/iter beside (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  0)
              empty-image)


(check-expect (iterated-any/iter overlay (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (iterated-any/iter overlay (lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5)
              (my-iterated-overlay(lambda (n)
                                    (square (* n 50)
                                            "solid"
                                            (color (* n 50)
                                                   0 0)))
                                  5))

(check-expect (iterated-any/iter above (lambda (n)
                                    (square 50
                                            "outline"
                                            "red")
                                    )
                                  1)
              (iterated-above (lambda (n)
                                 (square 50
                                         "outline"
                                         "red")
                                 )1)
              )
